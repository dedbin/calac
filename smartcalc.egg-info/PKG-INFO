Metadata-Version: 2.4
Name: smartcalc
Version: 0.1.0
Summary: Safe expression parser/evaluator with lexer+Pratt parser
Requires-Python: >=3.9
Description-Content-Type: text/markdown

---

# üìò SmartCalc

**SmartCalc** ‚Äî —É—á–µ–±–Ω—ã–π –ø—Ä–æ–µ–∫—Ç: –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –ª–µ–∫—Å–µ—Ä–æ–º, –ø–∞—Ä—Å–µ—Ä–æ–º –∏ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª–µ–º.
–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω –ø–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ ¬´–∫–∞–∫ —É –Ω–∞—Å—Ç–æ—è—â–∏—Ö —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è¬ª (–ª–µ–∫—Å–µ—Ä ‚Üí –ø–∞—Ä—Å–µ—Ä ‚Üí AST ‚Üí –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å).

---

## üîß –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞

```
smartcalc/
  errors.py       # –≤—Å–µ –∫–ª–∞—Å—Å—ã –æ—à–∏–±–æ–∫
  tokens.py       # –º–æ–¥–µ–ª—å —Ç–æ–∫–µ–Ω–∞
  lexer.py        # –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ —Ç–æ–∫–µ–Ω—ã
  astnodes.py     # –∫–ª–∞—Å—Å—ã AST: Num, Const, Unary, Binary
  precedence.py   # —Ç–∞–±–ª–∏—Ü–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
  parser.py       # Pratt-–ø–∞—Ä—Å–µ—Ä (–ø–æ binding power)
  constants.py    # –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã (pi, e, tau, phi)
  evaluator.py    # –æ–±—Ö–æ–¥–∏—Ç AST –∏ —Å—á–∏—Ç–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  api.py          # —É–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: tokenize(), parse(), eval_expr()
  cli.py          # REPL –∏ –ø–∞–∫–µ—Ç–Ω—ã–π —Ä–µ–∂–∏–º (–∑–∞–ø—É—Å–∫ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏)
scripts/
  smartcalc       # –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç (–æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è cli.main)
tests/
  test_core.py    # pytest-—Ç–µ—Å—Ç—ã –Ω–∞ –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  data/sample.calc
```

### –ü–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö

1. **Lexer**: —Å—Ç—Ä–æ–∫–∞ ‚Üí —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ (`NUM`, `IDENT`, `OP`, `LPAREN`, `RPAREN`, `EOF`).
2. **Parser**: Pratt-–ø–∞—Ä—Å–µ—Ä ‚Üí AST. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã/–∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞–¥–∞–Ω—ã –≤ `precedence.py`.
3. **Evaluator**: —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã—á–∏—Å–ª—è–µ—Ç AST. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫—É –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã.
4. **API**: –≤–Ω–µ—à–Ω–∏–µ —É–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–¥–µ.
5. **CLI**: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (REPL, —á—Ç–µ–Ω–∏–µ `.calc` —Ñ–∞–π–ª–æ–≤).

---

## ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫

### REPL

```bash
python -m smartcalc.cli
```

### –§–∞–π–ª —Å –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏

```bash
python -m smartcalc.cli -f tests/data/sample.calc
```

### –ß–µ—Ä–µ–∑ —Å–∫—Ä–∏–ø—Ç

```bash
scripts/smartcalc -f tests/data/sample.calc
```

### –í –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º Python

```python
>>> from smartcalc.api import eval_expr
>>> eval_expr("2+2*2")
6
>>> eval_expr("(-3)**2")
9
```

---

## üß© –ö–∞–∫ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

### 1. –ù–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã

–î–æ–±–∞–≤—å –≤ `constants.py`:

```python
DEFAULT_CONSTANTS = {
    **—Å—Ç–∞—Ä—ã–µ...,
    'g': 9.81,     # —É—Å–∫–æ—Ä–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è
}
```

### 2. –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

1. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å AST, –Ω–∞–ø—Ä–∏–º–µ—Ä `Call` (–∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ + —Å–ø–∏—Å–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤).
2. –í `parser.py`: —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å `IDENT '(' ... ')'`.
3. –í `evaluator.py`: –∑–∞–≤–µ—Å—Ç–∏ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π (`abs`, `sin`, `log`, ‚Ä¶), –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –≤—ã—á–∏—Å–ª—è—Ç—å.

### 3. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ / –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ

1. –ù–æ–≤—ã–π AST `Assign(name, expr)`.
2. –ü–∞—Ä—Å–µ—Ä: –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ `parse_stmt()`, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑–ª–∏—á–∞–µ—Ç `x = expr` –∏ –ø—Ä–æ—Å—Ç–æ `expr`.
3. Evaluator: —Ö—Ä–∞–Ω–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö.

### 4. –£–ª—É—á—à–µ–Ω–∏—è –æ—à–∏–±–æ–∫

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `pos` —É —Ç–æ–∫–µ–Ω–æ–≤/AST –∏ –ø–µ—á–∞—Ç–∞—Ç—å —Å—Ç—Ä–µ–ª–æ—á–∫—É ¬´^¬ª –ø–æ–¥ –æ—à–∏–±–æ—á–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º.

---

## üõ† Roadmap / TODO

* [ ] **–§—É–Ω–∫—Ü–∏–∏**: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ `sin(x)`, `cos(x)`, `abs(x)`, `sqrt(x)`, `log(x, base)`.
* [ ] **–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ**: –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è (`x = 5`) –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (`x + 2`).
* [ ] **–¢–µ—Å—Ç—ã**: —Ä–∞—Å—à–∏—Ä–∏—Ç—å pytest-–ø–æ–∫—Ä—ã—Ç–∏–µ, –¥–æ–±–∞–≤–∏—Ç—å property-based —Ç–µ—Å—Ç—ã.
* [ ] **–û—à–∏–±–∫–∏**: —É–ª—É—á—à–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö (–ø–æ–∑–∏—Ü–∏–∏, –ø–æ–¥—Å–∫–∞–∑–∫–∏).
* [ ] **–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è**: –ø—Ä–∏–º–µ—Ä—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π, —Å—Ö–µ–º—ã AST.
* [ ] **–£—Å—Ç–∞–Ω–æ–≤–∫–∞**: —Å–¥–µ–ª–∞—Ç—å `pyproject.toml` –¥–ª—è `pip install -e .`.
* [ ] **GUI/Web**: –ø—Ä–æ—Å—Ç–∞—è –æ–±–æ–ª–æ—á–∫–∞ –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, tkinter –∏–ª–∏ Flask).

---

‚ö° –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ —Å–¥–µ–ª–∞–Ω–∞ –º–æ–¥—É–ª—å–Ω–æ–π: –≤—Å—ë —Ä–∞—Å—à–∏—Ä—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö AST-—É–∑–ª–æ–≤ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.

---

